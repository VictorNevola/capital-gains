// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/interfaces/tax_calculator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "capital-gains-cli/internal/domain/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTaxCalculator is a mock of TaxCalculator interface.
type MockTaxCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockTaxCalculatorMockRecorder
}

// MockTaxCalculatorMockRecorder is the mock recorder for MockTaxCalculator.
type MockTaxCalculatorMockRecorder struct {
	mock *MockTaxCalculator
}

// NewMockTaxCalculator creates a new mock instance.
func NewMockTaxCalculator(ctrl *gomock.Controller) *MockTaxCalculator {
	mock := &MockTaxCalculator{ctrl: ctrl}
	mock.recorder = &MockTaxCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaxCalculator) EXPECT() *MockTaxCalculatorMockRecorder {
	return m.recorder
}

// CalculateTax mocks base method.
func (m *MockTaxCalculator) CalculateTax(operation entities.Operation, taxState *entities.TaxState) entities.TaxResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateTax", operation, taxState)
	ret0, _ := ret[0].(entities.TaxResult)
	return ret0
}

// CalculateTax indicates an expected call of CalculateTax.
func (mr *MockTaxCalculatorMockRecorder) CalculateTax(operation, taxState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateTax", reflect.TypeOf((*MockTaxCalculator)(nil).CalculateTax), operation, taxState)
}
